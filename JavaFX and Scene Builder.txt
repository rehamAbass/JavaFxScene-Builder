JavaFX ו-Scene Builder
תכנות מונחה עצמים
כיון שאתם עובדים עם java 8, אין שום צורך להתקין את JavaFX עצמו - הוא מגיע כבר יחד עם Java. בגרסאות מאוחרות יותר כבר כן צריך להתקין. 


אבל, אקליפס, בחלק מהמחשבים לא נותן לקוד שלכם לגשת לספריות. כתבו מחלקה קטנה בשם Check עם הקוד הבא כדי לבדוק אם זה המצב אצלכם:


import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;


public class Check extends Application {
        public static void main(String[] args) {
                launch(args);
        }
        @Override
        public void start(Stage stage) {
                StackPane root = new StackPane();
                Scene scene = new Scene(root, 100, 100);
                stage.setScene(scene);
                stage.show();
        }
}


אם אקליפס לא מסמן כלום באדום והתוכנית רצה ופותחת מסך קטן אז הכל בסדר. אחרת:


סידור הרשאות ל-JavaFX באקליפס
‏עמדו על התיקייה הראשית של פרויקט שאתם רוצים שיעבוד עם javafx. 
1. מקש ימני של עכבר, ובחירת properties.
2. בחרו ב-java build path
3. בחרו ב-tab של Libraries
4. עכשיו מופיע JRE system library, פתחו אותו (המשולש הקטן)
5. בחרו ב-Access rules, ולחצו על Edit
6. לחצו על Add
7. בחרו במקום של resolution באופציה Accessible
8. וב-Rule pattern כתבו בדיוק: 
javafx/** 
1. עכשיו אשרו את כל השינויים ושמרו אותם.


קצת מסובך אבל אמור לסדר לכם הכל..


אם מישהו מוצא פתרון יותר טוב - עדכנו אותנו!


התקנת Scene Builder
הורידו את הגרסה המתאימה למערכת שלכם, שתומכת בג'אווה 8 (כתוב: Download Scene Builder for Java 8) מתוך הדף:
https://gluonhq.com/products/scene-builder/


התקנת תוסף לאקליפס לתמיכה ב-scene builder


הערה: שלב זה אינו חובה, אם מאיזושהי סיבה אתם לא מצליחים להתקין, זה ממש לא נורא. זה פשוט אומר שהעבודה עם קבצי FXML לא תהיה דרך אקליפס אלא ידנית בעזרת scene builder. כלומר, הריצו אותו חיצונית כדי לייצר קבצים כאלה וכדי לערוך אותם.


בתוך אקליפס בחרו:
Help -> install new software
ובמסך שנפתח, בשורה מתחת ל Work with, כתבו את האותיות fx.


עכשיו, פתחו את החץ הקטן בסוף הקוביה של Work with, וכל פעם בחרו משם כתובת אחרת, עד שיופיע משהו בטבלה מתחת. 
פתחו את general purpose tools שאמור להיות שם, ותחתיו, בחרו את
e(fx)clipse IDE
אחרי שסימנתם אותו, לחצו next למטה והמשיכו בהתקנה.
עתה, בתוך אקליפס, היכנסו ל:
Window->Preferences
שם כתבו למעלה javafx, ותופיע אפשרות אחת מתחת (javafx). לחצו עליה. אז יהיה מקום למלא איפה נמצא קובץ ההרצה של scene builder, שנקרא SceneBuilder.exe. זה כבר תלוי איפה התקנתם אותו. תוכלו למצוא אותו ע"י חיפוש, ואז להעתיק את המיקום שלו לפה.
יצירת פרויקט JavaFX
שלוש אופציות:
1. עקרונית לא צריך שום דבר מיוחד, פתחו פרויקט כרגיל והכל יעבוד. 
2. בתוך פרויקט רגיל, אתם יכולים לייצר את המחלקה הראשונית אוטומטית. בחרו את הפרויקט שלכם, ולחצו על Ctrl-N ובחלון שנפתח חפשו: javaFX main class, בחרו באופציה זאת והוא יצור לכם את המחלקה הראשונית עם launch ו-start ריק.
3. במקום ליצור פרויקט רגיל, לחצו על Ctrl-N וחפשו javaFX project.  בחרו אותו ויווצר לכם פרויקט כבר עם מחלקה ראשית, שאפילו יש בה קוד ראשוני שיוצר מסך, ומטעין קובץ css - את זה אנחנו לא ממש צריכים, אבל אם אתם מכירים אתם מוזמנים להשתמש בו.        


הוספת רכיבי Scene Builder לפרויקט


כל קובץ FXML מתאר עץ רכיבים של JavaFX עם שורש בודד. כלומר מתאר מסך או חלק ממסך, כולל כל התת חלקים שלו. 


זהו קובץ שנראה קצת כמו html ואפשר לרוב והבין מה הוא מתאר. ניתן לעבוד עם קבצים אלו ישירות, אבל אנחנו לא נעשה זאת, אלא נשתמש ב-Scene Builder, שהיא תוכנה נוחה עם ממשק גרפי עשיר כדי לערוך אותם.


אפשר לטעון רכיבים מקבצי FXML ולהשתמש בהם ככל רכיב אחר. 


יצירת קובץ FXML
כשאתם עומדים על החבילה שבה אתם רוצים למקם את הקובץ: לחצו על Ctrl-N, בחלון שנפתח כתבו fxml, ובחרו ב-New FXML Document. צרו את הקובץ לפי השם שמתאים לכם, וגם בחרו את הסוג של הרכיב החיצוני ביותר (StackPane, GridPane, וכו').


הרצת Scene Builder
עמדו על קובץ fxml  שאתם רוצים לעבוד איתו לחצו על הכפתור הימני, ובחרו Open with Scene Builder. 




שימוש בסיסי ב-Scene Builder
התוכנה עצמה די ברורה לשימוש אחרי שלמדנו את הבסיס של javafx. יש פה כמובן המון אפשרויות ואופציות לשימוש ושינוי. שחקו איתם קצת ותבינו מה קורה בגדול. בסוף שמרו את הקובץ והמשיכו לשלב הבא:


חיבור קובץ ה-FXML למחלקות הג'אווה שלכם


הוספת קוד שטוען את קובץ ה-FXML
הקוד נראה משהו כזה:
VBox vbox;
try {
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("check.fxml"));
        vbox = loader.load();
} catch (IOException e) {
        e.printStackTrace();
        return;
}
ועכשיו אפשר להשתמש ב-vbox למה שרוצים.


הקוד הזה הוא כי הקובץ נקרא check.fxml, הוא נמצא באותה תיקייה כמו קובץ הג'אווה בו אנו כותבים את הקוד הזה, והרכיב בשורש שלו הוא מסוג VBox.  אתם כמובן יכולים לעשות דברים אחרים והשינויים פשוטים.


טיפול בארועים
נתינת שמות לרכיבים
בחרו ברכיב שאתם מעוניינים בו (כפתור מסוים למשל), ומצד ימין, תחת code, מלאו במקום בו כתוב fx:id שם ייחודי שאיתו תוכלו להתייחס לרכיב זה. למשל: button1.


קישור לשיטה לטיפול בארועים
באותו מקום יש רשימה ארוכה של Event-ים. אתם יכולים למלא שם של שיטה שתטפל בארוע מסוים של רכיב זה. למשל בכפתורים: לחיצה על הכפתור.


נתינת שם למחלקה המטפלת בארועים (controller)
משמאל למטה, תחת Controller, כתבו את השם של המחלקה שאתם רוצים שתטפל בארועים שרשמתם למעלה. מחלקה זו צריכה להיות באותה תיקייה כמו קובץ ה-fxml, ולכן אם הוא נמצא בתוך איזשהי חבילה, אז גם פה תנו את השם המלא: למשל app.MyController אם שם החבילה הוא app.


יצירת  ה-controller
Scene Builder לא תייצר לכם את המחלקה בעצמה, אבל כמעט. לחצו למעלה:
View -> Show sample controller skeleton
והוא יתן לכם את שלד של הקוד של המחלקה הזו. אתם יכולים להעתיק את הקוד וליצור את המחלקה. חשוב שהיא תהיה בדיוק באותה תיקייה בה נמצא קובץ הג'אווה שטוען את קובץ ה-fxml. אחרת הוא לא ימצא אותה.


תוכן ה-controller
בתוך המחלקה שיצרתם כעת, תראו כמה דברים:
1. לכל רכיב שלו נתתם שם, יש משתנה פרטי במחלקה עם בדיוק אותו שם. זהו הרכיב עצמו, ואם תשנו ערכים בו, או תקשיבו בו לארועים זה יעבוד.
2. מעל כל רכיב כזב כתוב FXML@, זה סימון מיוחד של המערכת ואין צורך להתייחס אליו.
3. לכל אירוע שביקשתם לטפל יש שיטה ריקה מתאימה בשם שנקבתם. אתם יכולים למלא שם את הקוד שתרצו.
בעצם בזמן הטעינה של קובץ ה-FXML כבר נרשמות כל השיטות האלו כמטפלות בארועים שביקשתם (פועל פה מנגנון שלא למדנו עליו, שהוא בעצם שימוש במצביעים לפונקציות).


חיבור המחלקה שלכם וה-controller
לשימוש פשוט, מה שעשינו עד עכשיו אמור לעבוד. אבל אם רוצים שהקוד ממחלקות אחרות יוכל לדבר עם מחלקת ה-controller, אז אין לנו איך, כי אין לנו גישה למופע של המחלקה שנוצר בזמן טעינת ה-fxml. 


יותר מזה, אם נרצה שמחלקות אחרות ידברו עם הרכיבים של שיצרנו ב-Scene Builder גם אין לנו דרך, כי הם מופיעים כשדות של מחלקת ה-Controller.


הפתרון לכך הוא פשוט, בקוד שכתבנו למעלה לטעינת קובץ ה-fxml, אפשר גם לקבל את ה-controller. ואנחנו יכולים להוסיף לקוד שלו איזה שיטות שבא לנו, ולכן נוכל לבקש ממנו שיתן לנו רכיבים שנבקש, וגם לשלוח לו מה שנרצה.


אם למשל קראנו למחלקת הcontroller שלנו MyController, אז נשנה את הקוד למעלה:


VBox vbox;
MyController controller;
try {
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("check.fxml"));
        vbox = loader.load();
        controller = loader.getController();
} catch (IOException e) {
e.printStackTrace();
}        
ועכשיו אפשר לדבר איתו.
הערות:
1. אתם יכולים לתת את אותו שם שיטה לטפל בכמה אירועים. זה יכול לחסוך בקוד, אבל אז תצטרכו בתוך השיטה להבדיל בין האירועים.
2. יש אירועים ש-Scene Builder לא מטפל בהם, כמו למשל להקשיב לשינויים. לכן, למשל אם רוצים Slider כמו שלמדנו, ניתן לו שם ב-Scene Builder, ואז בקוד שלנו נוסיף ChangeListener בצורה מלאה. 
3. כך גם אם נרצה לדעת שמישהו בחר אבר ב-ListView.
4. טיפ חשוב: אחרי שאתם שומרים שינויים ב-Scene Builder, חשוב לעשות Refresh לפרויקט שלכם באקליפס (לחצו על F5 כשאתם עומדים עליו), אחרת הוא לא ידע ששינתם משהו.


הנה תיקייה עם פרויקט קטנצ'יק לדוגמא כולל כל החלקים.